{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer, useEffect } from 'react';\nimport axios from 'axios';\nconst ACTIONS = {\n  MAKE_REQUEST: 'make-request',\n  GET_DATA: 'get-data',\n  ERROR: 'error'\n}; // limited access for sev purposes\n// Proxy server to get around CORS https://cors-anywhere.herokuapp.com/\n\nconst BASE_URL = 'https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json';\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case ACTIONS.MAKE_REQUEST:\n      return {\n        loading: true,\n        jobs: []\n      };\n\n    case ACTIONS.GET_DATA:\n      return { ...state,\n        loading: false,\n        jobs: action.payload.jobs\n      };\n\n    case ACTIONS.ERROR:\n      return { ...state,\n        loading: false,\n        error: action.payload.error,\n        jobs: []\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default function useFetchJobs(params, page) {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, {\n    jobs: [],\n    loading: true\n  });\n  useEffect(() => {\n    const cancelToken = axios.CancelToken.source();\n    dispatch({\n      type: ACTIONS.MAKE_REQUEST\n    });\n    axios.get(BASE_URL, {\n      cancelToken: cancelToken.token,\n      params: {\n        markdown: true,\n        page: page,\n        ...params\n      }\n    }).then(res => {\n      dispatch({\n        type: ACTIONS.GET_DATA,\n        payload: {\n          jobs: res.data\n        }\n      });\n      console.log(res.data);\n    }).catch(e => {\n      dispatch({\n        type: ACTIONS.ERROR,\n        payload: {\n          error: e\n        }\n      });\n    });\n  }, [params, page]);\n  return state;\n}\n\n_s(useFetchJobs, \"/FGFJNgqbogxIpU11lJeDoO2Ht8=\");","map":{"version":3,"sources":["/Users/therandomfool/Desktop/code projects/React Github Jobs App/src/useFetchJobs.jsx"],"names":["useReducer","useEffect","axios","ACTIONS","MAKE_REQUEST","GET_DATA","ERROR","BASE_URL","reducer","state","action","type","loading","jobs","payload","error","useFetchJobs","params","page","dispatch","cancelToken","CancelToken","source","get","token","markdown","then","res","data","console","log","catch","e"],"mappings":";;AAAA,SAASA,UAAT,EAAqBC,SAArB,QAAqC,OAArC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAC;AACVC,EAAAA,YAAY,EAAE,cADJ;AAEVC,EAAAA,QAAQ,EAAE,UAFA;AAGVC,EAAAA,KAAK,EAAE;AAHG,CAAd,C,CAMA;AACA;;AACA,MAAMC,QAAQ,GAAG,4EAAjB;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC5B,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,OAAO,CAACC,YAAb;AACI,aAAQ;AAACQ,QAAAA,OAAO,EAAE,IAAV;AAAgBC,QAAAA,IAAI,EAAE;AAAtB,OAAR;;AAEJ,SAAKV,OAAO,CAACE,QAAb;AACI,aAAO,EAAE,GAAGI,KAAL;AAAYG,QAAAA,OAAO,EAAE,KAArB;AAA4BC,QAAAA,IAAI,EAAEH,MAAM,CAACI,OAAP,CAAeD;AAAjD,OAAP;;AAEJ,SAAKV,OAAO,CAACG,KAAb;AACE,aAAO,EAAE,GAAGG,KAAL;AAAYG,QAAAA,OAAO,EAAE,KAArB;AAA4BG,QAAAA,KAAK,EAAEL,MAAM,CAACI,OAAP,CAAeC,KAAlD;AAAyDF,QAAAA,IAAI,EAAE;AAA/D,OAAP;;AAEF;AACI,aAAOJ,KAAP;AAXR;AAaH;;AAGD,eAAe,SAASO,YAAT,CAAsBC,MAAtB,EAA8BC,IAA9B,EAAoC;AAAA;;AAC/C,QAAM,CAACT,KAAD,EAAQU,QAAR,IAAoBnB,UAAU,CAACQ,OAAD,EAAU;AAACK,IAAAA,IAAI,EAAE,EAAP;AAAWD,IAAAA,OAAO,EAAE;AAApB,GAAV,CAApC;AACAX,EAAAA,SAAS,CAAC,MAAK;AACX,UAAMmB,WAAW,GAAGlB,KAAK,CAACmB,WAAN,CAAkBC,MAAlB,EAApB;AACAH,IAAAA,QAAQ,CAAC;AAACR,MAAAA,IAAI,EAAER,OAAO,CAACC;AAAf,KAAD,CAAR;AACAF,IAAAA,KAAK,CAACqB,GAAN,CAAUhB,QAAV,EAAoB;AAChBa,MAAAA,WAAW,EAAEA,WAAW,CAACI,KADT;AAEhBP,MAAAA,MAAM,EAAE;AAAEQ,QAAAA,QAAQ,EAAE,IAAZ;AAAkBP,QAAAA,IAAI,EAAEA,IAAxB;AAA8B,WAAGD;AAAjC;AAFQ,KAApB,EAGGS,IAHH,CAGQC,GAAG,IAAI;AACXR,MAAAA,QAAQ,CAAC;AAAER,QAAAA,IAAI,EAAER,OAAO,CAACE,QAAhB;AAA0BS,QAAAA,OAAO,EAAE;AAAED,UAAAA,IAAI,EAAEc,GAAG,CAACC;AAAZ;AAAnC,OAAD,CAAR;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACC,IAAhB;AACH,KAND,EAMGG,KANH,CAMUC,CAAC,IAAG;AACVb,MAAAA,QAAQ,CAAC;AAAER,QAAAA,IAAI,EAAER,OAAO,CAACG,KAAhB;AAAuBQ,QAAAA,OAAO,EAAE;AAAEC,UAAAA,KAAK,EAAEiB;AAAT;AAAhC,OAAD,CAAR;AACH,KARD;AAUH,GAbQ,EAaN,CAACf,MAAD,EAASC,IAAT,CAbM,CAAT;AAeA,SAAOT,KAAP;AACH;;GAlBuBO,Y","sourcesContent":["import { useReducer, useEffect} from 'react'\nimport axios from 'axios'\n\nconst ACTIONS={\n    MAKE_REQUEST: 'make-request',\n    GET_DATA: 'get-data',\n    ERROR: 'error'\n}\n\n// limited access for sev purposes\n// Proxy server to get around CORS https://cors-anywhere.herokuapp.com/\nconst BASE_URL = 'https://cors-anywhere.herokuapp.com/https://jobs.github.com/positions.json'\n\nfunction reducer(state, action) {\n    switch (action.type) {\n        case ACTIONS.MAKE_REQUEST:\n            return  {loading: true, jobs: []}\n\n        case ACTIONS.GET_DATA:\n            return { ...state, loading: false, jobs: action.payload.jobs}\n            \n        case ACTIONS.ERROR:\n          return { ...state, loading: false, error: action.payload.error, jobs: [] }  \n\n        default: \n            return state;\n        }\n}\n\n\nexport default function useFetchJobs(params, page) {\n    const [state, dispatch] = useReducer(reducer, {jobs: [], loading: true})\n    useEffect(() =>{\n        const cancelToken = axios.CancelToken.source()\n        dispatch({type: ACTIONS.MAKE_REQUEST})\n        axios.get(BASE_URL, {\n            cancelToken: cancelToken.token, \n            params: { markdown: true, page: page, ...params }\n        }).then(res => {\n            dispatch({ type: ACTIONS.GET_DATA, payload: { jobs: res.data } }) \n            console.log(res.data)\n        }).catch( e=> {\n            dispatch({ type: ACTIONS.ERROR, payload: { error: e } }) \n        })\n\n    }, [params, page])\n    \n    return state;\n}"]},"metadata":{},"sourceType":"module"}